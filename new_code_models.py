from enum import Enum
from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field

# New models for CodeMasterAgent

class CodeTaskType(str, Enum):
    GENERATE = "generate"
    ANALYZE = "analyze"
    REFACTOR = "refactor"
    DEBUG = "debug"
    EXPLAIN = "explain"
    CONVERT = "convert"
    # Add more as needed, matching what CodeMasterAgent._determine_task_type might return

class CodeExecutionRequest(BaseModel):
    task_type: CodeTaskType
    language: Optional[str] = None  # e.g., "python", "javascript"
    code_snippet: Optional[str] = None
    user_prompt: str # Detailed instruction for the code task
    context: Optional[Dict[str, Any]] = None # Additional context for the agent
    dependencies: Optional[List[str]] = None # e.g., library dependencies for generation

class CodeExecutionResponse(BaseModel):
    request_id: str # Will be generated by the server/agent
    task_type: CodeTaskType
    status: str # e.g., "completed", "failed", "in_progress"
    output_code: Optional[str] = None
    explanation: Optional[str] = None
    analysis: Optional[Dict[str, Any]] = None # For analysis tasks
    error_message: Optional[str] = None
    self_reflection: Optional[Dict[str, Any]] = None
    reasoning_log: Optional[List[Dict[str, Any]]] = None
